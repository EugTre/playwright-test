"""Models related to Admin Table Component"""
import json
from dataclasses import dataclass


@dataclass
class EntryLookupStrategy:
    """Strategy definition for entry lookup in
    Admin Table Component.

    Args:
        column (int): column number (1-based, like CSS nth-child()).

        field (str): name of the field in the TableEntry.get_lookup_params()
        to compare with.

        selector (optional, str): additional selector to nested element in <td>
        that contains desired text/value. Defaults to "".

        by_text (optional, bool): retieve data of cell as innerText (true) or
        value.
        Defaults is True.

        apply_expression (optional, str): JS expression to apply to retrived
        value before comparison, where 'value' - retrieved data.
        Defaults to "value.trim()".

        is_uid (optional, bool): flag that this lookup strategy related to
        unique identifier and if value match expected - immediately return
        found row index, omitting comparison to any other fields/values.
        Defaults is True.
    """

    column: int
    field: str
    selector: str = ""
    by_text: bool = True
    apply_expression: str = "value.trim()"
    is_uid: bool = False

    def prepare_strategy_data(
        self,
        entity_fields_collection: dict[str, str | int]
    ) -> str:
        """Converts strategy data into JS-like array to be injected
        into a snippet.

        Args:
            entity_fields_collection (dict[str, str | int]): field
            names and value to compare with, generated by
            TableEntry.get_lookup_params() method.

        Returns:
            str: JS-like string containing strategy data.
        """
        expected_value = entity_fields_collection.get(self.field, None)
        if expected_value is None:
            return None

        output = json.dumps([
            f"td:nth-child({self.column}) {self.selector}",
            f"{expected_value}",
            self.by_text,
            "_EXPR_",
            self.is_uid
        ]).replace(
            '"_EXPR_"', f"value => {self.apply_expression}"
        )

        return output


@dataclass
class EntryReadStrategy:
    """Strategy definition for entry lookup in
    Admin Table Component.

    Args:
        column (int): column number (1-based, like CSS nth-child()).

        selector (optional, str): additional selector to nested element in <td>
        that contains desired text/value. Defaults to "".

        by_text (optional, bool): retieve data of cell as innerText (true) or
        value.
        Defaults is True.

        apply_expression (optional, str): JS expression to apply to retrived
        value before comparison, where 'value' - retrieved data.
        Defaults to "value.trim()".
    """

    column: int
    selector: str = ""
    by_text: bool = True
    apply_expression: str = "value.trim()"

    def prepare_strategy_data(self) -> str:
        """Converts strategy data into JS-like array to be injected
        into a snippet.

        Returns:
            str: JS-like string containing strategy data.
        """
        output = json.dumps([
            f"td:nth-child({self.column}) {self.selector}",
            self.by_text,
            "_EXPR_"
        ]).replace(
            '"_EXPR_"', f"value => {self.apply_expression}"
        )

        return output
